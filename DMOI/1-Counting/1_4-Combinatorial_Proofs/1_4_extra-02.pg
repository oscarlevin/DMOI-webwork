## DBsubject(Combinatorics)
## DBchapter(Coutning)
## DBsection(Principles (addition, subtraction, multiplication))
## Level(6)
## KEYWORDS('counting','proof','combinatorial proof')
## Institution(University of Northern Colorado)
## Author(Oscar Levin)
## TitleText1(Discrete Mathematics: an Open Introduction)
## AuthorText1(Oscar Levin)
## EditionText1(3)
## Section1(1.4)
## Problem1()

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "draggableProof.pl",
  "PGcourse.pl"
);
TEXT(beginproblem());

Context("Numeric");

$y = random(3,10,1);
$statement = "\(\binom{n + $y}{2} = \binom{n}{2} + \binom{$y}{2} + $y n\)";

@correct = (
  ["How many 2-card hands can you select from a partial deck of cards that has \(n\) red cards and \($y\) black cards?",
  "there are \(n + $y\) cards total, of which we must choose 2.", 
  "we could either choose 2 of the \(n\) red cards, or 2 of the \($y\) black cards, or one of each (chosing one of the \(n\) red cards for each of the \($y\) choices of black card)."],
  ["How many ways can you select two students to win a prize from among \(n\) math majors and $y history majors (assuming no double majors)?","there are a total of \(n+$y\) students, from which you must choose 2.","there are \(\binom{n}{2}\) ways to select two math majors, another \(\binom{$y}{2}\) ways to select two history majors, and \($y n\) ways to select one of each."],
  ["How many bowls of two different ice cream flavors could you order if you can choose from \(n\) flavors with nuts and $y flavors without nuts?",
  "there are \(n+$y\) flavors all together, from which you must choose 2.", 
  "there are \(\binom{n}{2}\) choices when both flavors have nuts, another \(\binom{$y}{2}\) when neither flavor has nuts, and \($y n\) choices when one has nuts and the other doesn't."],
  ["How many 2-topping pizzas are possible choosing from \(n\) meats and $y vegetables?",
  "there are \(n+$y\) toppings all together, from which you must choose 2.", 
  "there are \(\binom{n}{2}\) choices for two meats, another \(\binom{$y}{2}\) for vegetarian pizzas, and \($y n\) choices for a pizza that has one vegetable and one meat."],
  ["How many bit strings of length \(n+$y\) contain exactly two 1's?",
  "there are \(n+$y\) positions, from which you must choose two to put a 1.",
  "you could pick two positions for the 1s from the first \(n\) positions, or from the last $y positions, or put one 1 in the first \(n\) positions and the other in the last $y positions."],
);

@incorrect = (
  ["How many $y-topping pizzas can you make choosing from \(n\) possible toppings?",
  "there are two choices (put it on the pizza or don't) for each topping",
  "there are two choices for the \(n\) possible toppings, or two choices for the $y toppings you actually get, or you can get all the toppings."],
  ["How many \(n\)-letter words contain $y different letters?",
  "there are \(n+$y\) letters all together, and you have two choices for each.",
  "You can use or not use either the \(n\) letters, or the $y letters, or use some of each."],
);

$indexCorrect = random(0,$#correct,1);
$indexIncorrect = random(0,$#incorrect,1);

$sourcelabel = "${BBOLD}Statements to choose from:${EBOLD}";
$targetlabel  =  "${BBOLD}Your Proof:${EBOLD} Put chosen statements in order in this column and press the Submit Answers button.";


$Proof = DraggableProof([
"Consider the question: $correct[$indexCorrect][0]",
"The first way to answer this question is \(\binom{n + $y}{2}\).",
"This is because $correct[$indexCorrect][1]",
"A second answer to the question is \(\binom{n}{2} + \binom{$y}{2} + $y n\).",
"This is because $correct[$indexCorrect][2]",
"Since both expressions answer the same question, they must be equal.  Therefore \(\binom{n + $y}{2} = \binom{n}{2} + \binom{$y}{2} + $y n\).",
],

# Other statements
[
"Consider the question: $incorrect[$indexIncorrect][0]",
"This is because $incorrect[$indexIncorrect][1]",
"This is because $correct[$indexCorrect][2]",
],


SourceLabel => $sourcelabel,
TargetLabel =>  $targetlabel,
);


$length = $Proof->numNeeded;



BEGIN_PGML

By dragging statements from the left column
to the right column below, give a _combinatorial_ proof of the identity [$statement]

The correct proof will use [$length] of the statements below.

[@ $Proof->Print @]***
END_PGML

ANS($Proof->cmp);

ENDDOCUMENT();