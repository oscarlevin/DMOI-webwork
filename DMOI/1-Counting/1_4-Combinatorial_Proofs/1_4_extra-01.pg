## DBsubject(Combinatorics)
## DBchapter(Coutning)
## DBsection(Principles (addition, subtraction, multiplication))
## Level(6)
## KEYWORDS('counting','proof','combinatorial proof')
## Institution(University of Northern Colorado)
## Author(Oscar Levin)
## TitleText1(Discrete Mathematics: an Open Introduction)
## AuthorText1(Oscar Levin)
## EditionText1(3)
## Section1(1.4)
## Problem1()

DOCUMENT();

loadMacros(
  "PGstandard.pl",
  "MathObjects.pl",
  "PGML.pl",
  "draggableProof.pl",
  "PGcourse.pl"
);
TEXT(beginproblem());

Context("Numeric");

$n = random(4,20,1);
$statement = "\($n + $n = 2\cdot $n\)";

@correct = (
  ["How many two letter codes are there using only the first \($n\) letters of the alphabet, that start with either \(a\) or \(b\)?",
  "there are \($n\) codes that start with \(a\), and another \($n\) codes that start with \(b\).", 
  "there are 2 choices for the first letter, and for each, \($n\) choices for the second letter."],
  ["How many outcomes are possible from flipping a coin and rolling a \($n\)-sidded die?",
  "there are \($n\) outcomes where the coin lands heads and another \($n\) outcomes where the coin lands tails.",
  "there are 2 choices for how the coin lands, and for each, there are \($n\) choices for how the die rolls."],
  ["How many single scoop ice cream cones are possible using \($n\) flavors of ice cream and either a suger cone or a waffle cone?",
  "there are \($n\) cones you can get in a suger cone, and another \($n\) in a waffle cone.", 
  "you have two choices for the type of cone, and for each, \($n\) choices for the flavor of ice cream."],
);

@incorrect = (
  ["How many 2-topping pizzas can you make choosing from \($n\) possible toppings?",
  "there are \($n\) choices for the first topping and \($n\) choices for the second topping.",
  "there are 2 identical toppings or 2 different toppings."],
  ["How many bit strings of length \($n\) contain exactly two 1's?",
  "there are \($n\) choices for the location of the first 1, and \($n\) choices for the location of the second 1.",
  "there are two positions where 1 goes and \($n\) positions where 0 can go."],
  ["How many \($n\)-letter words contain only two different letters?",
  "there are \($n\) choices for the first letter, and \($n\) choices for the second letter.",
  "there are two choices for which letters you pick and \($n\) choices for where to put them."],
);

$indexCorrect = random(0,$#correct,1);
$indexIncorrect = random(0,$#incorrect,1);

$sourcelabel = "${BBOLD}Statements to choose from:${EBOLD}";
$targetlabel  =  "${BBOLD}Your Proof:${EBOLD} Put chosen statements in order in this column and press the Submit Answers button.";


$Proof = DraggableProof([
"Consider the question $correct[$indexCorrect][0]",
"The first way to answer this question is \($n + $n\).",
"This is because $correct[$indexCorrect][1]",
"A second answer to the question is \(2\cdot $n\).",
"This is because $correct[$indexCorrect][2]",
"Since both expressions answer the same question, they must be equal.  Therefore \($n+$n = 2\cdot $n\).",
],

# Other statements
[
"Consider the question $incorrect[$indexIncorrect][0]",
"This is because $incorrect[$indexIncorrect][1]",
"This is because $correct[$indexCorrect][2]",
"Thus, by the distributive property, we can conclude that \($n+$n = 2\cdot $n\)"
],


SourceLabel => $sourcelabel,
TargetLabel =>  $targetlabel,
);


$length = $Proof->numNeeded;



BEGIN_PGML

By dragging statements from the left column
to the right column below, give a _combinatorial_ proof of the identity [$statement]

The correct proof will use [$length] of the statements below.

[@ $Proof->Print @]***
END_PGML

ANS($Proof->cmp);

ENDDOCUMENT();